{"version":3,"sources":["?","modules/array.js","modules/date.js","modules/function.js","modules/number.js","modules/object.js","modules/promise.js","modules/string.js"],"names":["Object","defineProperties","Array","prototype","first","value","this","last","length","Date","frob","Function","tap","fn","self","data","not","arg","memoize","cache","Number","toMoney","parseFloat","toFixed","Promise","then","String","contains","substring","indexOf","words","trim","split"],"mappings":"CAAA,WCAAA,OAAOC,iBAAiBC,MAAMC,WAC5BC,OACEC,MAAO,WACL,MAAOC,MAAK,KAGhBC,MACEF,MAAO,WACL,MAAOC,MAAKA,KAAKE,OAAS,OCRhCR,OAAOC,iBAAiBQ,KAAKN,WAC3BO,MACEL,MAAO,gBCCXL,OAAOC,iBAAiBU,SAASR,WAoB/BS,KACEP,MAAO,SAAsBQ,GAC3B,KAAMC,GAAOR,IACb,OAAO,UAAUS,GAEf,MADAF,GAAGE,GACID,EAAKC,MAKlBC,KACEX,MAAO,WACL,MAAO,UAAUY,GACf,OAAQX,KAAKW,MAKnBC,SACEb,MAAO,WACL,KAAMS,GAAOR,KACPa,IAGN,OAFAL,GAAKK,MAAQA,EAEN,SAAUF,GAKf,MAJMA,KAAOE,KACXA,EAAMF,GAAOH,EAAKG,IAGbE,EAAMF,QCjDrBjB,OAAOC,iBAAiBmB,OAAOjB,WAS7BkB,SACEhB,MAAO,WACL,MAAOiB,YAAWhB,KAAKiB,QAAQ,QCdrCvB,OAAOC,iBAAiBD,OAAOG,WAC7BO,MACEL,MAAO,gBCCXL,OAAOC,iBAAiBuB,QAAQrB,WAI9BS,KACEP,MAAO,SAAqBQ,GAC1B,MAAOP,MAAKmB,KAAK,SAAUpB,GAEzB,MADAQ,GAAGR,GACIA,QCRfL,OAAOC,iBAAiByB,OAAOvB,WAiB7BwB,UACEtB,MAAO,SAAyBuB,GAC9B,SAAWtB,KAAKuB,QAAQD,KAgB5BE,OACEzB,MAAO,WACL,MAAOC,MAAKyB,OAAOC,MAAM","file":"out/jext.min.js","sourceRoot":"./","sourcesContent":[null,"Object.defineProperties(Array.prototype, {\n  first: {\n    value: function Array_first() {\n      return this[0];\n    }\n  },\n  last: {\n    value: function Array_last() {\n      return this[this.length - 1];\n    }\n  }\n});\n","Object.defineProperties(Date.prototype, {\n  frob: {\n    value: function thingFrob() {\n    }\n  }\n});\n","/**\n * @namespace Function\n */\nObject.defineProperties(Function.prototype, {\n  /**\n   * @method Function.prototype.tap\n   *\n   * @desc\n   * Wraps the function bound to this with an higher order function\n   * that in turn calls the supplied function with the value originally\n   * intended for the function bound to this\n   *\n   * @summary wraps this function so that we can tap the argument\n   *\n   * @param {function} fn - the tapping function.\n   *\n   * @returns {function}\n   * the wrapper function.\n   *\n   * @example\n   * var handle = (data) => data.id;\n   * getPromise().then(handle.tap(val => window.val = val))\n   */\n  tap: {\n    value: function Function_tap(fn) {\n      const self = this;\n      return function (data) {\n        fn(data);\n        return self(data);\n      };\n    }\n  },\n\n  not: {\n    value: function Function_not() {\n      return function (arg) {\n        return !this(arg);\n      };\n    }\n  },\n\n  memoize: {\n    value: function Function_memoize() {\n      const self = this;\n      const cache = {};\n      self.cache = cache;\n\n      return function (arg) {\n        if (!(arg in cache)) {\n          cache[arg] = self(arg);\n        }\n\n        return cache[arg];\n      }\n    }\n  }\n});\n","/**\n * @namespace Number\n */\nObject.defineProperties(Number.prototype, {\n  /**\n   * @method Number.prototype.toMoney\n   *\n   * Truncates a number to a maximum precision of 0.01\n   *\n   * @example\n   * (3.3123).toMoney() // -> 3.31\n   */\n  toMoney: {\n    value: function Number_toMoney() {\n      return parseFloat(this.toFixed(2));\n    }\n  }\n});\n","Object.defineProperties(Object.prototype, {\n  frob: {\n    value: function thingFrob() {\n    }\n  }\n});\n","/**\n * @namespace Promise\n */\nObject.defineProperties(Promise.prototype, {\n  /**\n   * @method Promise.prototype.tap\n   */\n  tap: {\n    value: function Promise_tap(fn) {\n      return this.then(function (value) {\n        fn(value);\n        return value;\n      });\n    }\n  }\n});\n","/**\n * @namespace String\n */\nObject.defineProperties(String.prototype, {\n  /**\n   * @method String.prototype.contains\n   *\n   * @desc\n   * Checks whether the supplied substring is a part of this.\n   *\n   * @param {string} substring - the substring to check for.\n   *\n   * @returns {boolean}\n   * true if substring is a part of this string,\n   * otherwise false.\n   *\n   * @example\n   * 'foo'.contains('f') // -> true\n   * 'foo'.contains('Q') // -> false\n   */\n  contains: {\n    value: function String_contains(substring) {\n      return !!(~this.indexOf(substring));\n    }\n  },\n\n  /**\n   * @method String.prototype.words\n   *\n   * @desc\n   * splits a string of text into words.\n   *\n   * @returns {string[]}\n   * An array containing the words.\n   *\n   * @example\n   * 'This is a senctence'.words() // ['This', 'is', 'a', 'sentence.']\n   */\n  words: {\n    value: function String_words() {\n      return this.trim().split(' ');\n    }\n  }\n});\n"]}