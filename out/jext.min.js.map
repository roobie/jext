{"version":3,"sources":["?","modules/array.js","modules/date.js","modules/function.js","modules/number.js","modules/object.js","modules/string.js"],"names":["Object","defineProperties","Array","prototype","first","value","this","last","length","Date","frob","Function","tap","fn","self","data","Number","money","parseFloat","toFixed","String","contains","substring","indexOf","words","split"],"mappings":"CAAA,WCAAA,OAAOC,iBAAiBC,MAAMC,WAC5BC,OACEC,MAAO,WACL,MAAOC,MAAK,KAGhBC,MACEF,MAAO,WACL,MAAOC,MAAKA,KAAKE,OAAS,OCRhCR,OAAOC,iBAAiBQ,KAAKN,WAC3BO,MACEL,MAAO,gBCCXL,OAAOC,iBAAiBU,SAASR,WAoB/BS,KACEP,MAAO,SAAsBQ,GAC3B,GAAIC,GAAOR,IAEX,OAAO,UAAUS,GAEf,MADAF,GAAGE,GACID,EAAKC,QC7BpBf,OAAOC,iBAAiBe,OAAOb,WAC7Bc,OACEZ,MAAO,WACL,MAAOa,YAAWZ,KAAKa,QAAQ,QCHrCnB,OAAOC,iBAAiBD,OAAOG,WAC7BO,MACEL,MAAO,gBCCXL,OAAOC,iBAAiBmB,OAAOjB,WAiB7BkB,UACEhB,MAAO,SAAyBiB,GAC9B,SAAWhB,KAAKiB,QAAQD,KAgB5BE,OACEnB,MAAO,WACL,MAAOC,MAAKmB,MAAM","file":"out/jext.min.js","sourceRoot":"./","sourcesContent":[null,"Object.defineProperties(Array.prototype, {\n  first: {\n    value: function Array_first() {\n      return this[0];\n    }\n  },\n  last: {\n    value: function Array_last() {\n      return this[this.length - 1];\n    }\n  }\n});\n","Object.defineProperties(Date.prototype, {\n  frob: {\n    value: function thingFrob() {\n    }\n  }\n});\n","/**\n * @namespace Function\n */\nObject.defineProperties(Function.prototype, {\n  /**\n   * @method Function.prototype.tap\n   *\n   * @desc\n   * Wraps the function bound to this with an higher order function\n   * that in turn calls the supplied function with the value originally\n   * intended for the function bound to this\n   *\n   * @summary wraps this function so that we can tap the argument\n   *\n   * @param {function} fn - the tapping function.\n   *\n   * @returns {function}\n   * the wrapper function.\n   *\n   * @example\n   * var handle = (data) => data.id;\n   * getPromise().then(handle.tap(val => window.val = val))\n   */\n  tap: {\n    value: function Function_tap(fn) {\n      var self = this;\n\n      return function (data) {\n        fn(data);\n        return self(data);\n      };\n    }\n  }\n});\n","Object.defineProperties(Number.prototype, {\n  money: {\n    value: function Number_money() {\n      return parseFloat(this.toFixed(2));\n    }\n  }\n});\n","Object.defineProperties(Object.prototype, {\n  frob: {\n    value: function thingFrob() {\n    }\n  }\n});\n","/**\n * @namespace String\n */\nObject.defineProperties(String.prototype, {\n  /**\n   * @method String.prototype.contains\n   *\n   * @desc\n   * Checks whether the supplied substring is a part of this.\n   *\n   * @param {string} substring - the substring to check for.\n   *\n   * @returns {boolean}\n   * true if substring is a part of this string,\n   * otherwise false.\n   *\n   * @example\n   * 'foo'.contains('f') // -> true\n   * 'foo'.contains('Q') // -> false\n   */\n  contains: {\n    value: function String_contains(substring) {\n      return !!(~this.indexOf(substring));\n    }\n  },\n\n  /**\n   * @method String.prototype.words\n   *\n   * @desc\n   * splits a string of text into words.\n   *\n   * @returns {string[]}\n   * An array containing the words.\n   *\n   * @example\n   * 'This is a senctence'.words() // ['This', 'is', 'a', 'sentence.']\n   */\n  words: {\n    value: function String_words() {\n      return this.split(' ');\n    }\n  }\n});\n"]}